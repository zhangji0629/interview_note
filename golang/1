相关面经:
    https://zhuanlan.zhihu.com/p/51222070
    https://zhuanlan.zhihu.com/p/51222248  
    https://zhuanlan.zhihu.com/p/51220836
    https://blog.csdn.net/weiyuefei/article/details/77963810

问题1: golang的goroutine调度机制
    csdn博客参考:https://blog.csdn.net/liangzhiyang/article/details/52669851
    自我总结：
        主要基于三个基本对象G,M,P
        G代表一个协程,每次go调用都会创建一个G对象；　
        M代表一个线程，每一次创建一个M 对象的时候，都会创建一个底层线程，所有的Ｇ任务，最终都要在M上执行,M最多有10000个，超过10000个的时候，会发生panic
        P代表一个处理器，每个运行的M必须绑定一个P,就像线程必须在CPU上执行一样．P的个数就是GOMAXPROCS，最多有256,主要看机器有多少核

        每个P保存着一个G任务队列，也有一个全局的G任务队列,全局G任务队列会跟本地G任务队列按照策略相互交换，本地队列满了，会把一半送给全局队列; P使用一个全局数组(255)来保存的，并且维护一个全局的P空闲链表

        每次go调用的时候:
        1. 创建一个G对象，加入到本地Ｇ队列，或者全局G队列中去．
        2. 如果还有空闲的P,则会创建一个M
        3. M会创建一个底层线程，循环执行能够找到的G任务．
        4. G任务执行顺序，先从本地队列找，本地队列找不到的话，再从全局队列找，一次性转移全局G/全局P个，再从其他队列P中找，一次性转移一半
        5. 所有Ｇ执行按照go调用顺序执行.

        监控管理:启动的时候，会创建一个线程sysmon,用来监控和管理，记录所有P的G任务计数schedtick;如果检测到schedtick一直没有递增．说明一直在执行同一个G任务．　如果超过一定的时间（10ms），就在这个G任务的栈信息里面加一个标记; 然后这个G任务在执行的时候，如果遇到非内联函数调用，就会检查一次这个标记，然后中断自己，把自己加到队列末尾，执行下一个G

        G 任务中断恢复过程: 
            中断的时候，将寄存器里的栈信息保存到G对象里
            再次轮到自己执行的时候，将自己的G对象里的栈复制到寄存器里，然后就可以接着执行
        goroutine 按照抢占式调度，一个goroutine 最多执行10ms,超过10ms强行中断，执行下一个．


问题2: go new和make区别:  
    参考博客: https://www.jianshu.com/p/c173dab0e71c
    new只用来分配内容，不会初始化内存，讲内存置零．
    make 只适用于slice,channel,map,分配内存之后还会进行初始化

问题3: go怎么从源码编译到二进制文件
    参考博客:https://baijiahao.baidu.com/s?id=1617651814280074562&wfr=spider&for=pc
    1. 扫描程序，将源代码转换为令牌列表，供解析器使用。
    2. 解析器，将标记转换为抽象语法树，供代码生成使用。
    3. 代码生成，将抽象语法树转换为机器代码。

问题4: go的锁如何实现，用了什么cpu指令
    参考博客:

问题5: go的runtime如何实现

问题6: c++的map和go的map的区别,go map底层原理

问题7: goroutine泄漏？ 设置timeout，select加定时器
    goroutine泄露参考博客:https://blog.csdn.net/xuduorui/article/details/53956385
                          https://www.cnblogs.com/chenqionghe/p/9769351.html
                          https://blog.csdn.net/zg_hover/article/details/81097410
     goroutine泄露: 开启了一个goroutine，用完后，我们要正确让其结束。如果它没用了，还没结束，那就是goroutine leak,goroutine由于channel的读/写端退出而一直阻塞，导致goroutine一直占用资源，而无法退出 goroutine进入死循环中，导致资源一直无法释放
     goroutine泄露原因：goroutine由于channel的读/写端退出而一直阻塞，导致goroutine一直占用资源，而无法退出
                        goroutine进入死循环中，导致资源一直无法释放
     解决办法：在退出的时候做一些必要的清理工作.


问题8: 怎么实现协程完美退出？
    参考博客:https://blog.csdn.net/m0_37579159/article/details/79257397
    1: 让channel传递退出信号．
    2: 使用WaitGroup

问题9: 用channel实现定时器？（实际上是两个协程同步）

问题10: channel的实现？
    参考博客:https://blog.csdn.net/u012279631/article/details/80280072
            https://www.cnblogs.com/bonelee/p/6056373.html

问题11: go为什么高并发好？

问题12: 怎么理解go的interface, c++的模板跟go的interface的区别 
    参考博客: https://blog.csdn.net/justaipanda/article/details/43155949
              https://blog.csdn.net/i6448038/article/details/82916330
              https://my.oschina.net/90design/blog/1633378
              https://my.oschina.net/90design/blog/1633420
         在Go中，接口是一组方法签名。当一个类型为接口中的所有方法提供定义时，它被称为实现该接口
         具有0个方法的接口称为空接口。它表示为interface {}。由于空接口有0个方法，所有类型都实现了空接口。


 
问题14: C++和go对比，java和go对比

问题15: go struct能不能比较
    可以比较
问题16: go defer（for defer）
问题17: select可以用于什么
    参考博客: https://www.jianshu.com/p/2a1146dc42c3
             https://blog.csdn.net/u011957758/article/details/82230316

问题18: context包的用途
       参考博客:https://www.jianshu.com/p/77e4a1421cb9 
       做goroutine上下文管理，诸如有效期、终止routline树、传递请求全局变量之类的功能
问题19: client如何实现长连接
问题20: 主协程如何等其余协程完再操作
        使用WaitGroup
问题21: slice，len，cap，共享，扩容
问题22: map如何顺序读取
问题23:Go的反射包怎么找到对应的方法
    参考博客: https://mp.weixin.qq.com/s/dmtLWZpwBNaDlGjMCC0HxQ
问题24: sync.Pool使用原因
        参考博客:https://blog.csdn.net/bravezhe/article/details/79887514
                 https://blog.csdn.net/yimin_tank/article/details/83001512
        使用原因：协程安全，增加对象重用几率，减少gc负担
问题25: golang timer实现原理．
        参考博客: https://guidao.github.io/go_timer.html
问题26:  golang 的内存回收是如何做到的？
        参考博客:https://blog.csdn.net/qq_17612199/article/details/80278632
                https://www.cnblogs.com/diegodu/p/5606937.html
问题27: 如何用channel实现一个令牌桶？
